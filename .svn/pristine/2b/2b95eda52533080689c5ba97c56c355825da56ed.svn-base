using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using Com.Winfotian.Model;

namespace Com.Winfotian.DB.Provider
{
    public class FieldProvider
    {
        public List<T_DTU_FieldDesc> GetFiledList(string Company, string Group, string SiteName)
        {
            List<T_DTU_FieldDesc> DtuList = new List<T_DTU_FieldDesc>();
            StringBuilder SqlStr = new StringBuilder();
            SqlStr.Append("SELECT  c.*  FROM [Infa]..[T_DTU] as a left join [Infa]..[T_DTU_Group] as b ");
            SqlStr.Append(" on a.GroupCode=b.GroupCode inner join [Infa]..[T_DTU_FieldDesc] as  c on a.Dtuid=c.Dtuid where 1=1 ");
            if(Company != "0")
            {
                SqlStr.Append(" and b.CompanyId=@CompanyId ");
            }
            if(Group != "0")
            {
                SqlStr.Append(" and a.GroupCode=@GroupCode ");
            }
            if(SiteName.Length > 0)
            {
                SqlStr.Append(" and a.DtuidName like   @SiteName   ");
            }
            SqlParameter[] pars = { 
                                new SqlParameter("@CompanyId",Company),
                                new SqlParameter("@GroupCode",Group),
                                new SqlParameter("@SiteName","%"+SiteName+"%")
                                  };

            using(IDataReader dr = SqlHelper.DBHelper.ExecuteReader(SqlHelper.DBHelper.OnlyRead, CommandType.Text, SqlStr.ToString(), pars))
            {
                while(dr.Read())
                {
                    var obj = IDataT_DTU_FieldDescReader(dr);
                    if(obj != null)
                    {
                        DtuList.Add(obj);
                    }
                }
            }
            return DtuList;
        }

        private T_DTU_FieldDesc IDataT_DTU_FieldDescReader(IDataReader dr)
        {
            T_DTU_FieldDesc model = new T_DTU_FieldDesc();
            try
            {
                model.Id = (dr["Id"] is DBNull) ? 0 : Convert.ToInt32(dr["Id"].ToString());
                model.Dtuid = (dr["Dtuid"] is DBNull) ? string.Empty : dr["Dtuid"].ToString();
                model.ColName = (dr["ColName"] is DBNull) ? string.Empty : dr["ColName"].ToString();
                model.FieldName = (dr["FieldName"] is DBNull) ? string.Empty : dr["FieldName"].ToString();
                model.FieldShortDesc = (dr["FieldShortDesc"] is DBNull) ? string.Empty : dr["FieldShortDesc"].ToString();
                model.FieldDesc = (dr["FieldDesc"] is DBNull) ? string.Empty : dr["FieldDesc"].ToString();
                model.FieldUnit = (dr["FieldUnit"] is DBNull) ? string.Empty : dr["FieldUnit"].ToString();
                model.ValueMin = (dr["ValueMin"] is DBNull) ? 0 : Convert.ToDecimal(dr["ValueMin"].ToString());
                model.ValueMax = (dr["ValueMax"] is DBNull) ? 0 : Convert.ToDecimal(dr["ValueMax"].ToString());
                model.Lowlimit = (dr["Lowlimit"] is DBNull) ? 0 : Convert.ToDecimal(dr["Lowlimit"].ToString());
                model.Highlimit = (dr["Highlimit"] is DBNull) ? 0 : Convert.ToDecimal(dr["Highlimit"].ToString());
                model.Lololimit = (dr["Lololimit"] is DBNull) ? 0 : Convert.ToDecimal(dr["Lololimit"].ToString());
                model.Hihilimit = (dr["Hihilimit"] is DBNull) ? 0 : Convert.ToDecimal(dr["Hihilimit"].ToString());
                model.ValueInOrOut = (dr["ValueInOrOut"] is DBNull) ? 0 : Convert.ToInt32(dr["ValueInOrOut"].ToString());
                model.IsAlert = (dr["IsAlert"] is DBNull) ? 0 : Convert.ToInt32(dr["IsAlert"].ToString());
                model.IsCollect = (dr["IsCollect"] is DBNull) ? 0 : Convert.ToInt32(dr["IsCollect"].ToString());
                model.IsShow = (dr["IsShow"] is DBNull) ? 0 : Convert.ToInt32(dr["IsShow"].ToString());
                model.UpdateFlag = (dr["UpdateFlag"] is DBNull) ? 0 : Convert.ToInt32(dr["UpdateFlag"].ToString());
                model.OrderId = (dr["OrderId"] is DBNull) ? 0 : Convert.ToInt32(dr["OrderId"].ToString());
                model.ParentId = (dr["ParentId"] is DBNull) ? 0 : Convert.ToInt32(dr["ParentId"].ToString());
                model.KeyValues = (dr["KeyValues"] is DBNull) ? string.Empty : dr["KeyValues"].ToString();
                model.FieldType = (dr["FieldType"] is DBNull) ? 0 : Convert.ToInt32(dr["FieldType"].ToString());
            }
            catch(Exception ex)
            {
                //WebLog.WSLogger.Error(ex.Message);//Please add references(log4net.dll)
                return null;
            }
            return model;
        }

        public T_DTU_FieldDesc GetFiledById(string ID, string FieldName)
        {
            T_DTU_FieldDesc td = new T_DTU_FieldDesc();
            StringBuilder SqlStr = new StringBuilder();
            SqlStr.Append("SELECT   * FROM [Infa]..[T_DTU_FieldDesc] where Dtuid=@Dtuid and FieldName=@FieldName ");
            SqlParameter[] pars = { 
                                  new SqlParameter("@Dtuid",ID),
                                  new SqlParameter("@FieldName",FieldName)
                                  };
            using(var reader = SqlHelper.DBHelper.ExecuteReader(SqlHelper.DBHelper.OnlyRead, CommandType.Text, SqlStr.ToString(), pars))
            {
                if(reader != null)
                {
                    while(reader.Read())
                    {
                        var obj = IDataT_DTU_FieldDescReader(reader);
                        if(obj != null)
                        {
                            td = obj;
                        }
                    }
                }
            }
            return td;
        }
    }
}
