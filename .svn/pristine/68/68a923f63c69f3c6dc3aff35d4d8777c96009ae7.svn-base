using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using Com.Winfotian.Common;
using Com.Winfotian.DB;
using Com.Winfotian.DB.Provider;
using Com.Winfotian.Model;

namespace Com.Winfotian.Service
{
    // 注意: 使用“重构”菜单上的“重命名”命令，可以同时更改代码、svc 和配置文件中的类名“WinfoToolServiceWrite”。
    // 注意: 为了启动 WCF 测试客户端以测试此服务，请在解决方案资源管理器中选择 WinfoToolServiceWrite.svc 或 WinfoToolServiceWrite.svc.cs，然后开始调试。
    public class WinfoToolServiceWrite : IWinfoToolServiceWrite
    {
        public string GetData(int value)
        {
            return string.Format("You entered: {0}", value);
        }

        #region 用户管理
        #endregion

        #region 客户管理
        #endregion

        #region 编号管理
        #endregion

        #region 站点管理
        public bool UpdateSite(string ActiveKey, string UserId, T_DTU dtu)
        {
            bool rlst = false;
            try
            {
                dtu.GroupCode = "aa";
                dtu.Status = 1;
                if(WcfCommon.LoginCheck(ActiveKey))
                {
                    rlst = new DtuProvider().Update(dtu);
                    LogBLL.WriteOperatorLog(WinManager.GetPublicIP(), "", "用户修改了站点【(" + dtu.Dtuid + ")" + dtu.DtuidName + "】信息", 1);
                }
            }
            catch(Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), "", ex);
            }
            return rlst;
        }

        public bool AddSite(string ActiveKey, string UserId, T_DTU dtu)
        {
            bool rlst = false;
            try
            {
                if(WcfCommon.LoginCheck(ActiveKey))
                {
                    new DtuProvider().Add(dtu);
                    rlst = true;
                    LogBLL.WriteOperatorLog(WinManager.GetPublicIP(), "", "用户添加了站点【(" + dtu.Dtuid + ")" + dtu.DtuidName + "】信息", 1);
                }
            }
            catch(Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), "", ex);
            }
            return rlst;
        }
        /// <summary>
        /// 添加压力
        /// </summary>        
        public bool AddLevel(string ActiveKey, string UserId, T_DTU_PressureLevel model)
        {
            try
            {
                if(WcfCommon.LoginCheck(ActiveKey))
                    return false;
                int back = new DTUPressureLevelProvider().Add(model);
                if(back > 0)
                    return true;
            }
            catch(Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), UserId, ex);
            }
            return false;
        }
        #endregion

        public void DoWork()
        {
            throw new NotImplementedException();
        }
    }
}
