using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Web;
using System.Web.Mvc;
using Com.Winfotian.Model;
using Com.Winfotian.Proxy;
using WinfoToolSys.Pms;


namespace WinfoToolSys.Controllers.SiteMng
{
    public class VipDeviceController : Controller
    {
        public ActionResult Index()
        {
            return View();
        }

        //根据公司Id查询站点信息
        public JsonResult GetDTUListByComanyId(string companyId)
        {
            Dictionary<string, string> dic = new ServiceProxyRead().GetProxy().GetDTUListByCompanyId("", companyId);
            return Json(dic.ToList());
        }

        //根据站点Id查询
        public JsonResult GetVipDeviceList(string dtuId)
        {
            return Json(new ServiceProxyRead().GetProxy().GetVipDeviceList("", dtuId));
        }

        //添加、详细、删除
        public ActionResult VipDeviceDetail(string oper, string id)
        {
            StringBuilder sb = new StringBuilder();
            var model = new ServiceProxyRead().GetProxy().GetVipDeviceExById("", id);

            switch (oper)
            {
                case "Show":
                    ViewBag.Oper = "Show";
                    break;
                case "Edit":
                    ViewBag.Oper = "Edit";
                    sb.Append("<input type='button' class='buttonVer2' value='修改' onclick='VipDevice.UpdateDevice();' />");
                    break;
                case "Add":
                    ViewBag.Oper = "Add";
                    sb.Append("<input type='button' class='buttonVer2' value='添加' onclick='VipDevice.AddDevice();' />");
                    break;
                default:
                    break;
            }
            sb.Insert(0, "\"");
            sb.Append("\"");
            ViewBag.Button = sb.ToString();
            return View(model);
        }

        //添加
        public string AddDevice(T_DTU_Device model)
        {
            string result = "false";

            T_DTU_Device device = new T_DTU_Device();
            device.DeviceName = model.DeviceName;
            device.Dtuid = model.Dtuid;
            device.DeviceBrand = model.DeviceBrand;
            device.DeviceSN = model.DeviceSN;
            device.ModelCode = model.ModelCode;
            device.DeviceParams = model.DeviceParams;
            device.ProduceDate = model.ProduceDate;
            device.DeviceSupplier = "";
            device.Memo = model.Memo;
            device.UpdateFlag = 1;

            if (new ServiceProxyWrite().GetProxy().AddVIPDevice("", device))
            {
                result = "true";
            }
            return result;
        }

        //修改
        public string UpdateDevice(T_DTU_Device model)
        {
            string result = "false";

            T_DTU_Device device = new T_DTU_Device();
            device.Id = model.Id;
            device.DeviceName = model.DeviceName;
            device.Dtuid = model.Dtuid;
            device.DeviceBrand = model.DeviceBrand;
            device.DeviceSN = model.DeviceSN;
            device.ModelCode = model.ModelCode;
            device.DeviceParams = model.DeviceParams;
            device.ProduceDate = model.ProduceDate;
            device.Memo = model.Memo;
            device.UpdateFlag = model.UpdateFlag;

            if (new ServiceProxyWrite().GetProxy().UpdateVIPDevice("", device))
            {
                result = "true";
            }
            return result;
        }

        //删除
        public string DeleteDevice(string id)
        {
            string result = "false";

            if (new ServiceProxyWrite().GetProxy().DeleteVIPDevice("", Convert.ToInt32(id)))
            {
                result = "true";
            }
            return result;
        }
    }
}
