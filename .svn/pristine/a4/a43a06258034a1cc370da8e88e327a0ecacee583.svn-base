using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Remoting.Messaging;
using System.Runtime.Remoting.Proxies;
using System.ServiceModel;
using System.Web;
using Com.Winfotian.Service;

namespace Com.Winfotian.Proxy
{
    public class ServiceProxyRead : RealProxy
    {

        public ServiceProxyRead()
            : base(typeof(IWinfoToolServiceRead))
        {
        }

        private BasicHttpBinding GetBinding()
        {
            BasicHttpBinding BH = new BasicHttpBinding();
            BH.MaxReceivedMessageSize = 26214400;
            return BH;
        }

        private EndpointAddress GetEndPointAddress()
        {
            EndpointAddress EA = new EndpointAddress("http://localhost:5644/WinfoToolServiceRead.svc");
            return EA;
        }

        public override System.Runtime.Remoting.Messaging.IMessage Invoke(System.Runtime.Remoting.Messaging.IMessage msg)
        {
            IMethodReturnMessage methodReturn = null;
            IMethodCallMessage methodCall = (IMethodCallMessage)msg;
            var client = new ChannelFactory<IWinfoToolServiceRead>(GetBinding(), GetEndPointAddress());
            var channel = client.CreateChannel();
            try
            {
                object[] copiedArgs = Array.CreateInstance(typeof(object), methodCall.Args.Length) as object[];
                methodCall.Args.CopyTo(copiedArgs, 0);
                object returnValue = methodCall.MethodBase.Invoke(channel, copiedArgs);
                methodReturn = new ReturnMessage(returnValue,
                                                copiedArgs,
                                                copiedArgs.Length,
                                                methodCall.LogicalCallContext,
                                                methodCall);
                //TODO:Write log
            }
            catch(Exception ex)
            {
                var exception = ex;
                if(ex.InnerException != null)
                    exception = ex.InnerException;
                methodReturn = new ReturnMessage(exception, methodCall);
            }
            finally
            {
                var commObj = channel as ICommunicationObject;
                if(commObj != null)
                {
                    try
                    {
                        commObj.Close();
                    }
                    catch(CommunicationException)
                    {
                        commObj.Abort();
                    }
                    catch(TimeoutException)
                    {
                        commObj.Abort();
                    }
                    catch(Exception)
                    {
                        commObj.Abort();
                        //TODO:Logging exception
                        throw;
                    }
                }
            }
            return methodReturn;
        }



        public IWinfoToolServiceRead GetProxy()
        {
            IWinfoToolServiceRead proxy = (IWinfoToolServiceRead)new ServiceProxyRead().GetTransparentProxy();
            return proxy;
        }

    }

}