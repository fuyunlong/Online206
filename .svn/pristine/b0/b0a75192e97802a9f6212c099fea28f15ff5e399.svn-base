using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using Com.Winfotian.Common;
using Com.Winfotian.DB;
using Com.Winfotian.DB.Provider;
using Com.Winfotian.Model;

namespace Com.Winfotian.Service
{
    // 注意: 使用“重构”菜单上的“重命名”命令，可以同时更改代码、svc 和配置文件中的类名“WinfoToolServiceWrite”。
    // 注意: 为了启动 WCF 测试客户端以测试此服务，请在解决方案资源管理器中选择 WinfoToolServiceWrite.svc 或 WinfoToolServiceWrite.svc.cs，然后开始调试。
    public class WinfoToolServiceWrite : IWinfoToolServiceWrite
    {
        public string GetData(int value)
        {
            return string.Format("You entered: {0}", value);
        }

        #region 用户管理
        #endregion

        #region 客户管理
        #endregion

        #region 编号管理
        #endregion

        #region 站点管理
        public bool UpdateSite(string ActiveKey, string UserId, T_DTU dtu)
        {
            bool rlst = false;
            try
            {
                dtu.GroupCode = "aa";
                dtu.Status = 1;
                if (WcfCommon.LoginCheck(ActiveKey))
                {
                    rlst = new DtuProvider().Update(dtu);
                    LogBLL.WriteOperatorLog(WinManager.GetPublicIP(), "", "用户修改了站点【(" + dtu.Dtuid + ")" + dtu.DtuidName + "】信息", 1);
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), "", ex);
            }
            return rlst;
        }

        public bool AddSite(string ActiveKey, string UserId, T_DTU dtu)
        {
            bool rlst = false;
            try
            {
                if (WcfCommon.LoginCheck(ActiveKey))
                {
                    new DtuProvider().Add(dtu);
                    rlst = true;
                    LogBLL.WriteOperatorLog(WinManager.GetPublicIP(), "", "用户添加了站点【(" + dtu.Dtuid + ")" + dtu.DtuidName + "】信息", 1);
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), "", ex);
            }
            return rlst;
        }
        /// <summary>
        /// 添加压力
        /// </summary>        
        public EmReStatus AddLevel(string ActiveKey, string UserId, T_DTU_PressureLevel model)
        {
            try
            {
                if (!WcfCommon.LoginCheck(ActiveKey))
                    return EmReStatus.invalid;
                //int back = new DTUPressureLevelProvider().Add(model);
                //if (back > 0)
                //    return EmReStatus.success;
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), UserId, ex);
                return EmReStatus.exception;
            }
            return EmReStatus.fail;
        }
        //生成站点编号
        public List<string> GenerateSiteCode(string ActiveKey, string UserId, string CompanyId, int Num)
        {
            List<string> DtuidList = new List<string>();
            try
            {

            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), "", ex);
            }
            return DtuidList;
        }

        public bool DeleteSite(string ActiveKey, string DtuId, string UserId)
        {
            bool rslt = false;
            try
            {
                if (WcfCommon.LoginCheck(ActiveKey))
                {
                    rslt = new DtuProvider().Delete(DtuId);
                    if (rslt)
                    {
                        LogBLL.WriteOperatorLog(WinManager.GetPublicIP(), UserId, "删除站点" + DtuId, 1);
                    }
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), "", ex);
            }
            return rslt;
        }
        #endregion

        public void DoWork()
        {
            throw new NotImplementedException();
        }

        #region 字段管理
        //添加字段
        public bool AddFiled(string ActiveKey, string UserId, T_DTU_FieldDesc model)
        {
            bool rlst = false;
            try
            {
                if (model.KeyValues == null)
                {
                    model.KeyValues = "";
                }
                if (WcfCommon.LoginCheck(ActiveKey))
                {
                    if (new FieldProvider().Add(model) > 0)
                    {
                        rlst = true;
                    }
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), "", ex);
            }
            return rlst;
        }

        //更改字段
        public bool EditFiled(string ActiveKey, string UserId, T_DTU_FieldDesc model)
        {
            bool rlst = false;
            try
            {
                if (model.KeyValues == null)
                {
                    model.KeyValues = "";
                }
                if (WcfCommon.LoginCheck(ActiveKey))
                {
                    rlst = new FieldProvider().Update(model);
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), "", ex);
            }
            return rlst;
        }


        //删除站点配置
        public bool DeleteFiledd(string ActiveKey, string userId, string id)
        {
            bool rlst = false;
            try
            {
                int IntId = 0;
                int.TryParse(id, out IntId);
                if (IntId > 0)
                {
                    if (new FieldProvider().Delete(IntId))
                    {
                        rlst = true;
                        LogBLL.WriteOperatorLog(WinManager.GetPublicIP(), userId, "删除了站点站点配置", 1);
                    }
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), userId, ex);
            }
            return rlst;
        }
        #endregion

        #region 阀门影响管理

        public bool AddInfluence(string ActiveKey, T_DTU_ValveEffect model)
        {
            bool result = false;
            try
            {
                if (WcfCommon.LoginCheck(ActiveKey))
                {
                    if (new DtuValueInfluenceProvider().Add(model))
                    {
                        result = true;
                    }
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), "", ex);
            }
            return result;
        }

        public bool UpdateInfluence(string ActiveKey, T_DTU_ValveEffect model)
        {
            bool result = false;
            try
            {
                if (WcfCommon.LoginCheck(ActiveKey))
                {
                    if (new DtuValueInfluenceProvider().Update(model))
                    {
                        result = true;
                    }
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), "", ex);
            }
            return result;
        }

        public bool DeleteInfluence(string ActiveKey, string valveCode)
        {
            bool result = false;
            try
            {
                if (WcfCommon.LoginCheck(ActiveKey))
                {
                    if (new DtuValueInfluenceProvider().Delete(valveCode))
                    {
                        result = true;
                    }
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), "", ex);
            }
            return result;
        }
        #endregion

        #region 用户分组管理
        //添加用户分组
        public bool AddGroup(string ActiveKey, T_User_Group model)
        {
            bool result = false;
            try
            {
                if (WcfCommon.LoginCheck(ActiveKey))
                {
                    if (new UserGroupProvider().AddGroup(model))
                    {
                        result = true;
                    }
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), "", ex);
            }
            return result;
        }
        //修改用户分组
        public bool UpdateGroup(string ActiveKey, T_User_Group model)
        {
            bool result = false;
            try
            {
                if (WcfCommon.LoginCheck(ActiveKey))
                {
                    if (new UserGroupProvider().UpdateGroup(model))
                    {
                        result = true;
                    }
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), "", ex);
            }
            return result;
        }
        //删除用户分组
        public bool DeleteGroup(string ActiveKey, string groupCode)
        {
            bool result = false;
            try
            {
                if (WcfCommon.LoginCheck(ActiveKey))
                {
                    if (new UserGroupProvider().DeleteGroup(groupCode))
                    {
                        result = true;
                    }
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), "", ex);
            }
            return result;
        }
        #endregion

        #region 站点配置管理
        public bool AddDtuConfig(string ActiveKey, T_DTU_Config model)
        {
            bool result = false;
            try
            {
                if (WcfCommon.LoginCheck(ActiveKey))
                {
                    if (new DtuConfigProvider().Add(model))
                    {
                        result = true;
                    }
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), "", ex);
            }
            return result;
        }

        public bool UpdateDtuConfig(string ActiveKey, T_DTU_Config config)
        {
            bool result = false;
            try
            {
                if (WcfCommon.LoginCheck(ActiveKey))
                {
                    if (new DtuConfigProvider().Update(config))
                    {
                        result = true;
                    }
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), "", ex);
            }
            return result;
        }

        public bool DeleteDtuConfig(string ActiveKey, string configCode)
        {
            bool result = false;
            try
            {
                if (WcfCommon.LoginCheck(ActiveKey))
                {
                    if (new DtuConfigProvider().Delete(configCode))
                    {
                        result = true;
                    }
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), "", ex);
            }
            return result;
        }

        public bool DeleteConfig(string ActiveKey, string UserId, string ConfigCode)
        {
            bool rlst = false;
            try
            {
                if (WcfCommon.LoginCheck(ActiveKey))
                {
                    rlst = new SiteSetProvider().Delete(ConfigCode);
                    if (rlst)
                    {
                        LogBLL.WriteOperatorLog(WinManager.GetPublicIP(), UserId, "用户【" + UserId + "】,删除了配置【" + ConfigCode + "】", 1);
                    }
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), "", ex);
            }
            return rlst;
        }

        public bool UpdateDtuConfig(string ActiveKey, T_DTU_Config config, string UserId)
        {
            bool rlst = false;
            try
            {

                if (WcfCommon.LoginCheck(ActiveKey))
                    rlst = new DtuConfigProvider().Update(config);
                if (rlst)
                {
                    LogBLL.WriteOperatorLog(WinManager.GetPublicIP(), UserId, "用户修改了站点配置信息" + config.ConfigCode, 1);
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), "", ex);
            }
            return rlst;
        }
        #endregion

        #region 用户配置管理
        public bool AddUserConfig(string ActiveKey, T_User_Config model)
        {
            bool result = false;
            try
            {
                if (WcfCommon.LoginCheck(ActiveKey))
                {
                    if (new UserSettingProvider().AddConfig(model))
                    {
                        result = true;
                    }
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), "", ex);
            }
            return result;
        }

        public bool UpdateUserConfig(string ActiveKey, T_User_Config model)
        {
            bool result = false;
            try
            {
                if (WcfCommon.LoginCheck(ActiveKey))
                {
                    if (new UserSettingProvider().UpdateConfig(model))
                    {
                        result = true;
                    }
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), "", ex);
            }
            return result;
        }

        public bool DeleteUserConfig(string ActiveKey, string CCode)
        {
            bool result = false;
            try
            {
                if (WcfCommon.LoginCheck(ActiveKey))
                {
                    if (new UserSettingProvider().DeleteConfig(CCode))
                    {
                        result = true;
                    }
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), "", ex);
            }
            return result;
        }


        #endregion

        #region 站点用户管理

        public bool AddDTUUser(string ActiveKey, T_User_UserDtuid model)
        {
            bool result = false;
            try
            {
                if (WcfCommon.LoginCheck(ActiveKey))
                {
                    if (new UserDTUProvider().AddDTUUser(model))
                    {
                        result = true;
                    }
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), "", ex);
            }
            return result;
        }

        public bool DeleteDTUUser(string ActiveKey, string UserId, string Dtuid)
        {
            bool result = false;
            try
            {
                if (WcfCommon.LoginCheck(ActiveKey))
                {
                    if (new UserDTUProvider().DeleteDTUUser(UserId, Dtuid))
                    {
                        result = true;
                    }
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), "", ex);
            }
            return result;
        }

        #endregion



        public bool aa(string ActiveKey, string UserId, T_DTU_Config config)
        {
            bool rlst = false;
            try
            {
                if (WcfCommon.LoginCheck(ActiveKey))
                    rlst = new DtuConfigProvider().Update(config);
                if (rlst)
                {
                    LogBLL.WriteOperatorLog(WinManager.GetPublicIP(), UserId, "用户修改了站点配置信息" + config.ConfigCode, 1);
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), "", ex);
            }
            return rlst;
        }

        #region 站点分组管理
        public bool AddSiteGroup(string ActiveKey, T_DTU_Group model)
        {
            bool result = false;
            try
            {
                if (WcfCommon.LoginCheck(ActiveKey))
                {
                    if (new DtuGroupProvider().Add(model))
                    {
                        result = true;
                    }
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), "", ex);
            }
            return result;
        }

        public bool UpdateSiteGroup(string ActiveKey, T_DTU_Group model)
        {
            bool result = false;
            try
            {
                if (WcfCommon.LoginCheck(ActiveKey))
                {
                    if (new DtuGroupProvider().Update(model))
                    {
                        result = true;
                    }
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), "", ex);
            }
            return result;
        }

        public bool DeleteSiteGroup(string ActiveKey, string groupCode)
        {
            bool result = false;
            try
            {
                if (WcfCommon.LoginCheck(ActiveKey))
                {
                    if (new DtuGroupProvider().Delete(groupCode))
                    {
                        result = true;
                    }
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), "", ex);
            }
            return result;
        }
        #endregion

        #region 重要设备
        public bool AddVIPDevice(string ActiveKey, T_DTU_Device model)
        {
            bool result = false;
            try
            {
                if (WcfCommon.LoginCheck(ActiveKey))
                {
                    if (new VipDtuDevice().Add(model))
                    {
                        result = true;
                    }
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), "", ex);
            }
            return result;
        }

        public bool UpdateVIPDevice(string ActiveKey, T_DTU_Device model)
        {
            bool result = false;
            try
            {
                if (WcfCommon.LoginCheck(ActiveKey))
                {
                    if (new VipDtuDevice().Update(model))
                    {
                        result = true;
                    }
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), "", ex);
            }
            return result;
        }

        public bool DeleteVIPDevice(string ActiveKey, int id)
        {
            bool result = false;
            try
            {
                if (WcfCommon.LoginCheck(ActiveKey))
                {
                    if (new VipDtuDevice().Delete(id))
                    {
                        result = true;
                    }
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), "", ex);
            }
            return result;
        }
        #endregion

        #region 转发
        public bool AddTrans(string ActiveKey, string UserId, T_DTU_DataTransmit model)
        {
            bool rlst = false;
            try
            {
                if (WcfCommon.LoginCheck(ActiveKey))
                {
                    rlst = new DtuDataTransProvider().AddTrans(model);
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), UserId, ex);
            }
            return rlst;
        }

        public bool UpdateTrans(string ActiveKey, string UserId, T_DTU_DataTransmit model)
        {
            bool rlst = false;
            try
            {
                if (WcfCommon.LoginCheck(ActiveKey))
                {
                    rlst = new DtuDataTransProvider().UpdateTrans(model);
                    if (rlst)
                    {
                        LogBLL.WriteOperatorLog(WinManager.GetPublicIP(), UserId, "修改了配置" + model.DtuidName, 1);
                    }
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), UserId, ex);
            }
            return rlst;
        }

        public bool DeleteTrans(string ActiveKey, string Id)
        {
            bool rlst = false;
            try
            {
                if (WcfCommon.LoginCheck(ActiveKey))
                {
                    rlst = new DtuDataTransProvider().DeleteTrans(Convert.ToInt32(Id));
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), "", ex);
            }
            return rlst;
        }

        #endregion

        public bool AddSiteGroup(string ActiveKey, string UserId, T_DTU_Group group)
        {
            throw new NotImplementedException();
        }

        #region 压力等级管理
        public bool AddPreLevel(string ActiveKey, T_DTU_PressureLevel model)
        {
            bool result = false;
            try
            {
                if (WcfCommon.LoginCheck(ActiveKey))
                {
                    if (new DTUPressureLevelProvider().Add(model))
                    {
                        result = true;
                    }
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), "", ex);
            }
            return result;
        }

        public bool UpdatePreLevel(string ActiveKey, T_DTU_PressureLevel model)
        {
            bool result = false;
            try
            {
                if (WcfCommon.LoginCheck(ActiveKey))
                {
                    if (new DTUPressureLevelProvider().Update(model))
                    {
                        result = true;
                    }
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), "", ex);
            }
            return result;
        }

        public bool DeletePreLevel(string ActiveKey, string id)
        {
            bool result = false;
            try
            {
                if (WcfCommon.LoginCheck(ActiveKey))
                {
                    if (new DTUPressureLevelProvider().Delete(Convert.ToInt32(id)))
                    {
                        result = true;
                    }
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), "", ex);
            }
            return result;
        }
        #endregion

        #region 角色管理
        public bool AddUserRole(string ActiveKey, string UserId, T_User_Role UserRole)
        {
            bool rslt = false;
            try
            {
                if (WcfCommon.LoginCheck(ActiveKey))
                {
                    if (new DtuRoleProvider().Add(UserRole) == 1)
                    {
                        rslt = true;
                    }
                    if (rslt)
                    {
                        LogBLL.WriteOperatorLog(WinManager.GetPublicIP(), UserId, "添加角色" + UserRole.RoleName, 1);
                    }
                }
            }
            catch (Exception ex)
            { LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), UserId, ex); }
            return rslt;
        }

        public bool UpdateUserRole(string ActiveKey, string UserId, T_User_Role UserRole)
        {
            bool rslt = false;
            try
            {
                if (WcfCommon.LoginCheck(ActiveKey))
                {
                    rslt = new DtuRoleProvider().Update(UserRole);
                    if (rslt)
                    {
                        LogBLL.WriteOperatorLog(WinManager.GetPublicIP(), UserId, "更新角色信息" + UserRole.RoleName, 1);
                    }
                }
            }
            catch (Exception ex)
            { LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), UserId, ex); }
            return rslt;
        }

        public bool DelUserRole(string ActiveKey, string UserId, string RoleCode)
        {
            bool rslt = false;
            try
            {
                if (WcfCommon.LoginCheck(ActiveKey))
                {
                    rslt = new DtuRoleProvider().Delete(RoleCode);
                }
            }
            catch (Exception ex)
            {
                LogBLL.WriteExceptionLog(WinManager.GetPublicIP(), UserId, ex);
            }
            return rslt;
        }
        #endregion

    }
}
