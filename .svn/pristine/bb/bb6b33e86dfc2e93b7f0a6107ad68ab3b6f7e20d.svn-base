using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using Com.Winfotian.Model;

namespace Com.Winfotian.DB.Provider
{
    public class UserGroupProvider
    {
        //根据公司ID称查询分组信息
        public List<T_User_GroupEx> GetGroupByCompanyID(string CompanyId)
        {
            List<T_User_GroupEx> list = new List<T_User_GroupEx>();
            StringBuilder sb = new StringBuilder();
            sb.Append("SELECT a.[GroupCode] ,a.[GroupName],a.[GroupDesc],a.[ParentCode] ,a.[Status],a.[CompanyId],a.[UpdateFlag],b.GroupName as ParentName ");
            sb.Append("FROM [Infa]..[T_User_Group] as a left join [Infa]..[T_User_Group] as b on a.ParentCode=b.GroupCode where a.CompanyId=@CompanyId and a.[status]=1");
            SqlParameter[] pars = { 
                           new SqlParameter("@CompanyId",CompanyId)
                                  };
            using (SqlDataReader reader = SqlHelper.DBHelper.ExecuteReader(SqlHelper.DBHelper.OnlyRead, System.Data.CommandType.Text, sb.ToString(), pars))
            {
                if (reader != null)
                {
                    while (reader.Read())
                    {
                        var model = IDataReaderT_User_Group(reader);
                        if (model != null)
                        {

                            list.Add(new T_User_GroupEx
                            {
                                Group = model,
                                ParentName = reader["ParentName"] == DBNull.Value ? "" : reader["ParentName"].ToString()
                            });
                        }
                    }
                }
            }
            return list;
        }

        //根据分组编码查询分组信息
        public T_User_GroupEx GetGroupByCode(string groupCode)
        {
            T_User_GroupEx group = new T_User_GroupEx();
            StringBuilder sb = new StringBuilder();
            sb.Append("SELECT a.[GroupCode] ,a.[GroupName],a.[GroupDesc],a.[ParentCode] ,a.[Status],a.[CompanyId],a.[UpdateFlag],b.GroupName as ParentName ");
            sb.Append("FROM [Infa]..[T_User_Group] as a left join [Infa]..[T_User_Group] as b on a.ParentCode=b.GroupCode where a.GroupCode=@GroupCode and a.Status=1");
            SqlParameter[] pars = { 
                           new SqlParameter("@GroupCode",groupCode)
                                  };
            using (SqlDataReader reader = SqlHelper.DBHelper.ExecuteReader(SqlHelper.DBHelper.OnlyRead, System.Data.CommandType.Text, sb.ToString(), pars))
            {
                if (reader != null)
                {
                    while (reader.Read())
                    {
                        var model = IDataReaderT_User_Group(reader);
                        if (model != null)
                        {
                            group.Group = model;
                            group.ParentName = reader["ParentName"] == DBNull.Value ? "" : reader["ParentName"].ToString();
                        }
                    }
                }
            }
            return group;
        }

        //T_User_Group数据读取
        private T_User_Group IDataReaderT_User_Group(IDataReader dr)
        {
            T_User_Group model = new T_User_Group();
            try
            {
                model.GroupCode = (dr["GroupCode"] is DBNull) ? string.Empty : dr["GroupCode"].ToString();
                model.GroupName = (dr["GroupName"] is DBNull) ? string.Empty : dr["GroupName"].ToString();
                model.GroupDesc = (dr["GroupDesc"] is DBNull) ? string.Empty : dr["GroupDesc"].ToString();
                model.ParentCode = (dr["ParentCode"] is DBNull) ? string.Empty : dr["ParentCode"].ToString();
                model.Status = (dr["Status"] is DBNull) ? 0 : Convert.ToInt32(dr["Status"].ToString());
                model.CompanyId = (dr["CompanyId"] is DBNull) ? 0 : Convert.ToInt32(dr["CompanyId"].ToString());
                model.UpdateFlag = (dr["UpdateFlag"] is DBNull) ? 0 : Convert.ToInt32(dr["UpdateFlag"].ToString());
            }
            catch
            {
                return null;
            }
            return model;
        }
    }
}
